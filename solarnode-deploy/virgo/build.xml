<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" >

	<macrodef name="bundle-iterate">
		<attribute name="target"/>
		<sequential>
			<subant target="@{target}">
				<property name="dir.dist" value="${dir.dist}"/>
				<property name="dir.bundles" value="${dir.bundles}"/>
				<fileset refid="bundle.build.xml"/>
			</subant>
		</sequential>
	</macrodef>

	<property file="${basedir}/build.properties"/>
	
	<!-- Use build.properties to define the following comma-delimited lists: -->
	<property name="bundles" value="net.solarnetwork.central.common"/>
	<property name="plans" value=""/>
	
	<property name="dir.dist" value="${basedir}/target"/>
	<property name="dir.bundles" value="${basedir}/platform"/>
	
	<property name="dir.src.base" value="${basedir}/../../.."/>
	<property name="dir.src.plans" value="${basedir}/plans"/>
	<property name="dir.target" value="${dir.src.base}/solarnetwork-build/solarnetwork-osgi-lib"/>
	<property name="dir.platform" value="${dir.src.base}/solarnetwork-build/solarnetwork-osgi-target"/>

	<property name="dir.build" value="build"/>
	<property name="dir.assemble" value="${dir.build}/assemble"/>
	<property name="dir.deps" value="${dir.build}/deps"/>
	
	<import file="${dir.target}/lib-build.xml"/>

	<fileset id="bundle.build.xml" dir="${dir.src.base}" includes="solarnetwork-*/*/build.xml">
		<scriptselector language="javascript">
			var result = (project.getProperty("bundles").search("\\b" 
				+file.getParentFile().getName().replace(".","\\.") +"(\\s|,|$)") !== -1);
			if ( result ) {
				java.lang.System.out.println("Including bundle " +file.getParentFile().getName());
			}
			self.setSelected(result);
		</scriptselector>
	</fileset>
	
	<fileset id="plan.set" dir="${dir.src.plans}" includes="*">
		<scriptselector language="javascript">
			var result = (project.getProperty("plans").search("\\b" 
				+file.getName().replace(".","\\.") +"(\\s|,|$)") !== -1);
			if ( result ) {
				java.lang.System.out.println("Including plan " +file.getName());
			}
			self.setSelected(result);
		</scriptselector>
	</fileset>
	
	<target name="clean" description="Remove generated build files">
		<delete dir="${dir.build}" failonerror="no"/>
		<delete dir="${dir.dist}" failonerror="no"/>
		<delete dir="${dir.bundles}" failonerror="no"/>
	</target>
	
	<target name="prepare">
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.bundles}"/>
	</target>
	
	<target name="jar" description="Create bundle jars" depends="prepare">
		<bundle-iterate target="deploy"/>
		
		<!-- Also copy all dependent SolarNetwork JARs into target dir -->
		<copy todir="${dir.dist}">
			<fileset dir="${dir.bundles}" includes="net.solarnetwork.*"/>
		</copy>
	</target>
	
	<target name="clean-jar" description="Clean bundle jars">
		<bundle-iterate target="clean"/>
	</target>

	<target name="external-jars" depends="ivy-init">
		<ivy:settings file="${ivy.settings}"/>
		<ivy:resolve file="${basedir}/ivy.xml" conf="runtime"/>
		<mkdir dir="${dir.dist}"/>
		<ivy:retrieve type="jar" pattern="${dir.dist}/[artifact]-[revision].[ext]"/>
	</target>
	
	<target name="plans" if="plans">
		<copy todir="${dir.dist}">
			<fileset refid="plan.set"/>
		</copy>
	</target>
	
	<target name="assemble" depends="jar,external-jars,plans" description="Assemble jars"/>

</project>
