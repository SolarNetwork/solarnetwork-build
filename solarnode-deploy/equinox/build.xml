<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" >

	<property file="${basedir}/build.properties"/>

	<property name="bundle.startlevel.1" value="net.solarnetwork.common.pidfile"/>
	<property name="bundle.startlevel.3" value="net.solarnetwork.common.pidfile"/>
	<property name="bundle.nostart">
		slf4j-log4j,
		net.solarnetwork.external.org.eclipse.gemini.blueprint.extender.config,
		org.apache.catalina.ha,
		org.apache.catalina.tribes,
		org.apache.coyote,
		org.apache.jasper,
		org.apache.tomcat.util
	</property>
	
	<property name="log.file" value="/dev/shm/solar/log/solarnode.log"/>
	<property name="dir.runtime.lib" value="../lib"/>
	<property name="dir.base" value="base"/>
	
	<property name="dir.build" value="build"/>
	<property name="dir.assemble" value="${dir.build}/assemble"/>
	<property name="dir.target" value="${basedir}/../../solarnetwork-osgi-lib"/>
	<property name="dir.platform" value="${basedir}/../../solarnetwork-osgi-target"/>
	
	<import file="${dir.target}/lib-build.xml"/>
	
	<patternset id="base.node.app.core">
		<include name="*.jar"/>
		<exclude name="aopalliance*"/>
		<exclude name="aspectj*"/>
		<exclude name="com.springsource.org.apache.commons.*"/>
		<exclude name="com.springsource.org.apache.juli.extras-*"/>
		<exclude name="commons-logging*"/>
	</patternset>

	<patternset id="spring.osgi">
		<include name="spring/org.springframework.osgi.*"/>
	</patternset>
	
	<patternset id="virgo.support">
		<include name="virgo/*"/>
		<exclude name="virgo/*-sources-*"/>
	</patternset>
	
	<target name="app-clean">
		<delete dir="${dir.build}" failonerror="no"/>
	</target>
	
	<target name="assemble-prepare">
		<mkdir dir="${dir.assemble}"/>
		<mkdir dir="${dir.assemble}/app/boot"/>
		<mkdir dir="${dir.assemble}/app/main"/>
		<mkdir dir="${dir.assemble}/conf"/>
		<mkdir dir="${dir.assemble}/var"/>
	</target>
	
	<target name="assemble-base" depends="assemble-prepare">
		<copy todir="${dir.assemble}" flatten="no">
			<fileset dir="${dir.base}" includes="**">
				<exclude name="**/README.txt"/>
			</fileset>
		</copy>
	</target>
	
	<target name="app-boot" depends="ivy-init,assemble-prepare">
		<ivy:settings file="${ivy.settings}"/>
		<ivy:resolve file="${basedir}/ivy.xml" conf="boot"/>
		<delete dir="${dir.build}/jars" failonerror="no"/>
		<mkdir dir="${dir.build}/jars"/>
		<ivy:retrieve type="jar" pattern="${dir.build}/jars/[artifact]-[revision].[ext]"/>
		<mkdir dir="${dir.assemble}/app/boot"/>
		<copy todir="${dir.assemble}/app/boot" flatten="yes">
			<fileset dir="${dir.build}/jars" includes="*.jar" excludes="org.eclipse.osgi-*"/>
		</copy>
		<copy todir="${dir.assemble}/app">
			<fileset dir="${dir.build}/jars" includes="org.eclipse.osgi-*"/>
		</copy>
		<copy todir="${dir.assemble}/app/boot" flatten="no" filtering="yes">
			<fileset dir="${dir.runtime.lib}/app-boot">
				<include name="**"/>
			</fileset>
			<filterset>
				<filter token="LOGFILE" value="${log.file}"/>
			</filterset>
		</copy>
	</target>
	
	<target name="equinox-config">
		<fileset id="app.boot.files" dir="${dir.assemble}/app" includes="boot/*"/>
		<equinox-config-generate 
			filesetId="app.boot.files" 
			bundleStartLevelId="bundle.startlevel.1"
			defaultStartLevel="2"
			matchStartLevel="1"
			property="equinox.bundles.boot"/>
		<echo>Got config ${equinox.bundles.boot}</echo>
		
		<dirset id="app.boot.dirs" dir="${dir.assemble}/app" includes="boot/*"/>
		<equinox-config-generate 
			filesetId="app.boot.dirs" 
			bundleStartLevelId="bundle.startlevel.1"
			defaultStartLevel=""
			matchStartLevel=""
			property="equinox.bundledirs.boot"/>
		<echo>Got config ${equinox.bundledirs.boot}</echo>
		
		<fileset id="app.core.files" dir="${dir.assemble}/app" includes="core/*"/>
		<equinox-config-generate 
			filesetId="app.core.files" 
			bundleStartLevelId="bundle.startlevel.3"
			defaultStartLevel="4"
			matchStartLevel="3"
			property="equinox.bundles.core"/>
		<echo>Got config ${equinox.bundles.core}</echo>
		
		<dirset id="app.core.dirs" dir="${dir.assemble}/app" includes="core/*"/>
		<equinox-config-generate 
			filesetId="app.core.dirs" 
			bundleStartLevelId="bundle.startlevel.3"
			defaultStartLevel=""
			matchStartLevel=""
			property="equinox.bundledirs.core"/>
		<echo>Got config ${equinox.bundledirs.core}</echo>
		
		<copy todir="${dir.assemble}/conf" filtering="yes" overwrite="yes">
			<fileset file="config.ini"/>
			<filterset>
				<filter token="OSGI_BUNDLES" value="${equinox.bundles.boot},${equinox.bundledirs.boot},${equinox.bundles.core},${equinox.bundledirs.core}"/>
			</filterset>
		</copy>
	</target>
	
	<!--target name="app-gemini-web" depends="ivy-init,assemble-prepare">
		<ivy:settings file="${ivy.settings}"/>
		<ivy:resolve file="${basedir}/ivy.xml" conf="gemini"/>
		<delete dir="${dir.build}/jars" failonerror="no"/>
		<mkdir dir="${dir.build}/jars"/>
		<ivy:retrieve type="jar" pattern="${dir.build}/jars/[artifact]-[revision].[ext]"/>
		<mkdir dir="${dir.assemble}/app/core"/>
		<copy todir="${dir.assemble}/app/core" flatten="yes">
			<fileset dir="${dir.build}/jars" includes="*.jar"/>
		</copy>
	</target-->
	
	<target name="app-core" depends="ivy-init,assemble-prepare">
		<ivy:settings file="${ivy.settings}"/>
		<ivy:resolve file="${basedir}/ivy.xml" conf="core,gemini"/>
		<delete dir="${dir.build}/jars" failonerror="no"/>
		<mkdir dir="${dir.build}/jars"/>
		<ivy:retrieve type="jar" pattern="${dir.build}/jars/[artifact]-[revision].[ext]"/>
		<mkdir dir="${dir.assemble}/app/core"/>
		<copy todir="${dir.assemble}/app/core" flatten="yes">
			<fileset dir="${dir.build}/jars" includes="*.jar"/>
		</copy>
		<copy todir="${dir.assemble}/app/core" filtering="no">
			<fileset dir="${dir.runtime.lib}/app-core" includes="**/*.jar"/>
		</copy>
		<copy todir="${dir.assemble}/app/core">
			<fileset dir="${dir.runtime.lib}/app-core" includes="**" excludes="**/*.jar"/>
		</copy>
		<symlink action="delete" failonerror="no" link="${dir.assemble}/conf/log4j.properties"/>
		<symlink 
			link="${dir.assemble}/conf/log4j.properties" 
			resource="../app/core/net.solarnetwork.external.org.apache.log4j.config/log4j.properties" />
	</target>
	
	<target name="assemble" depends="assemble-base,app-boot,app-core,equinox-config"
		description="Assemble a base node directory structure"/>
	
	<target name="archive" depends="assemble"
		description="Assemble and then package a base node archive">
		<tar destfile="${dir.build}/base-equinox-node.tgz" compression="gzip" longfile="gnu">
			<tarfileset dir="${dir.assemble}">
				<include name="**"/>
				<exclude name="bin/*.sh"/>
			</tarfileset>
			<tarfileset dir="${dir.assemble}" mode="755">
				<include name="bin/*.sh"/>
			</tarfileset>
		</tar>
	</target>
	
	<macrodef name="equinox-config-generate">
		<attribute name="filesetId"/>
		<attribute name="bundleStartLevelId"/>
		<attribute name="defaultStartLevel"/>
		<attribute name="matchStartLevel"/>
		<attribute name="property"/> <!-- the property name to set -->
		<sequential>
			<script language="javascript"><![CDATA[
			// create startLevel1 object from bundle.startlevel.1 property
			var startLevel1 = {};
			var i, key, split;
			if ( "@{bundleStartLevelId}".length > 0 ) {
				split = String(self.getProject().getProperty("@{bundleStartLevelId}"))
					.split(/\s*,\s*/);
				for ( i = 0; i < split.length; i++ ) {
					key = split[i].replace(/\s+/g, '');
					startLevel1[key] = 1;
				}
			}
			var noStart = {};
			split = String(self.getProject().getProperty("bundle.nostart")).split(/\s*,\s*/);
			for ( i = 0; i < split.length; i++ ) {
				key = split[i].replace(/\s+/g, '');
				noStart[key] = 1;
			}
			
			var fileSet = self.getProject().getReference("@{filesetId}");
			var iterator = fileSet.iterator();
			var resource, fileName;
			var config = "";
			var startLevel, val;
			while ( iterator.hasNext() ) {
				resource = iterator.next();
				fileName = resource.getFile().getName();
				if ( config.length > 0 ) {
					config += ",";
				}
					
				startLevel = "@{defaultStartLevel}";
				for ( val in startLevel1 ) {
					if ( fileName.indexOf(val) == 0 ) {
						startLevel = "@{matchStartLevel}";
						break;
					}
				}
			
				if ( startLevel.length > 0 ) {
					for ( val in noStart ) {
						if ( fileName.indexOf(val) == 0 ) {
							startLevel = '';
							break;
						}
					}
				}
				if ( startLevel.length > 0 ) {
					startLevel = "@" +startLevel +"\\:start";
				}
			
				config += resource.getName() +startLevel;
			}
			self.getProject().setProperty("@{property}", config);
			]]></script>
		</sequential>
	</macrodef>
	
</project>
